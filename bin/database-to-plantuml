#!/usr/bin/env php
<?php

declare(strict_types=1);

require
    dirname(__DIR__) . DIRECTORY_SEPARATOR .
    'vendor' . DIRECTORY_SEPARATOR .
    'autoload.php';

use Hoa\Console;
use Hoa\Router;
use Hywan\DatabaseToPlantUML\Frontend;
use Hywan\DatabaseToPlantUML\Backend;

function usage()
{
    echo
        'Usage   : ' . $_SERVER['argv'][0], "\n\n" .
        'Options :' . "\n" .
        '  -d, --database-dsn=      : Database DSN, default is `mysql:host=localhost` (optional).' . "\n" .
        '  -u, --database-user=     : Database username, default is `root` (optional).' . "\n" .
        '  -p, --database-password= : Database password, default is `` (optional).' . "\n" .
        '  -s, --database-schema=   : Database name, with database schema if needed separated by a dot, ' .
        '                             i.e. `name` or `name.schema` (required).' . "\n" .
        '  -b, --backend=           : Rendering backend, default is `plantuml` (optional).' . "\n" .
        '  -h, --help               : This help.' . "\n" .
        '  -?, --help               : This help.' . "\n";
}

// Read the command line.
$parser = new Console\Parser();
$parser->parse(Router\Cli::getURI());

// Declare the options.
$options = new Console\GetOption(
    [
        ['database-dsn',      Console\GetOption::REQUIRED_ARGUMENT, 'd'],
        ['database-user',     Console\GetOption::REQUIRED_ARGUMENT, 'u'],
        ['database-password', Console\GetOption::REQUIRED_ARGUMENT, 'p'],
        ['database-name',     Console\GetOption::REQUIRED_ARGUMENT, 's'],
        ['backend',           Console\GetOption::REQUIRED_ARGUMENT, 'b'],
        ['help',              Console\GetOption::NO_ARGUMENT,       'h'],
        ['help',              Console\GetOption::NO_ARGUMENT,       '?'],
    ],
    $parser
);

// Compute options.
$databaseDsn      = 'mysql:host=localhost';
$databaseUser     = 'root';
$databasePassword = '';
$databaseName     = null;
$frontendName     = Frontend\MySQL\Reader::class;
$backendName      = Backend\PlantUML::class;

while (false !== $c = $options->getOption($v)) {
    switch($c) {
        case 'd':
            $databaseDsn = $v;

            break;

        case 'u':
            $databaseUser = $v;

            break;

        case 'p':
            $databasePassword = $v;

            break;

        case 's':
            $databaseName = $v;

            break;

        case 'b':
            $v = strtolower($v);

            switch ($v) {
                case 'commonmark':
                    $backendName = Backend\CommonMark::class;

                    break;

                case 'plantuml':
                    $backendName = Backend\PlantUML::class;

                    break;

                case 'plantuml-multiple-files':
                    $backendName = Backend\PlantUMLMultipleFiles::class;

                    break;

                default:
                    throw new RuntimeException(
                        'Backend ' . $v . ' is invalid. Choose between `commonmark` or `plantuml`.'
                    );
            }

            break;

        case 'h':
        case '?':
            usage();
            exit(1);
    }
}

if (empty($databaseName)) {
    echo 'The database name is required.', "\n\n";

    usage();

    exit(2);
}

if (0 !== preg_match('/^(?<type>[^:]+):/', $databaseDsn, $dsnType)) {
    switch ($dsnType['type']) {
        case 'mysql':
            $frontendName = Frontend\MySQL\Reader::class;

            break;

        case 'pgsql':
            $frontendName = Frontend\PgSQL\Reader::class;

            break;

        default:
            throw new RuntimeException(
                'Unfortunately, the DSN type `' . $dsnType['type'] .
                '` is not implemented :-(!'
            );
    }
} else {
    throw new RuntimeException(
        'The DSN `' . $dsn . '` seems to be invalid.'
    );
}

try {
    $reader  = new $frontendName($databaseDsn, $databaseUser, $databasePassword);
    $backend = new $backendName();

    echo $backend->visit($reader->read($databaseName));
} catch (Exception $e) {
    ob_start();

    Console\Cursor::colorize('foreground(white) background(red)');
    echo $e->getMessage(), "\n";
    Console\Cursor::colorize('normal');
    $content = ob_get_contents();

    ob_end_clean();

    file_put_contents('php://stderr', $content);
    exit(2);
}
